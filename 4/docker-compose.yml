version: '3.8'

services:
  # Существующие сервисы
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: order_service
    volumes:
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - services-network

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo123
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - services-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 10s
      retries: 5

  auth-service:
    build:
      context: .
      dockerfile: auth_service/docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=your-secure-secret-key-here
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=order_service
    volumes:
      - ./:/app
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - services-network

  orders-service:
    build:
      context: .
      dockerfile: orders_service/docker/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8000
      - SECRET_KEY=your-secure-secret-key-here
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=order_service
    volumes:
      - ./:/app
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - auth-service
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - services-network

  analytics-service:
    build:
      context: .
      dockerfile: analytics_service/docker/Dockerfile
    ports:
      - "8002:8002"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8000
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_USER=mongo
      - MONGO_PASSWORD=mongo123
      - MONGO_DB=analytics_service
    volumes:
      - ./:/app
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - auth-service
      - mongodb
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - services-network

networks:
  services-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data: